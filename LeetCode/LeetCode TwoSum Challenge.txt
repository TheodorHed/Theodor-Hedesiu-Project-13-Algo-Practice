From the LeetCode platform I decided to do the Two Sum challenge.

Given an array of integers nums and an integer target, I had to return the indices of the two numbers such that they add up to target.
I can assume that each input would have exactly one solution, and I could not use the same element twice.
I can return the answer in any order.

Example :
-------------------------------------------------------------
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

This is the code that I have made for the challenge :
-------------------------------------------------------------
def twoSum(self, nums: List[int], target: int) -> List[int]:
    counter = 0
    for i in nums:
        if nums[counter] + nums[counter + 1] == target:
            return [counter, counter + 1] 
        else:
            counter = counter + 1
-------------------------------------------------------------
So when testing the code with the above example, I get the desired output of [0, 1]:
-------------------------------------------------------------
nums = [2,7,11,15]
print(twoSum(nums, 9)
-------------------------------------------------------------
The function works by checking each element of the list to the next element and it will keep checking until it finds a pair of values that adds up to teh desired target.
The counter parameter keeps track of what element at which index is being checked.
If 2 values add up, the index of the 2 values are returned in a list.